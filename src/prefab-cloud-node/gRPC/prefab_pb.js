/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.prefab.BatchRequest', null, global);
goog.exportSymbol('proto.prefab.BufferedRequest', null, global);
goog.exportSymbol('proto.prefab.ConfigDelta', null, global);
goog.exportSymbol('proto.prefab.ConfigDeltas', null, global);
goog.exportSymbol('proto.prefab.ConfigServicePointer', null, global);
goog.exportSymbol('proto.prefab.ConfigValue', null, global);
goog.exportSymbol('proto.prefab.FeatureFlag', null, global);
goog.exportSymbol('proto.prefab.FeatureFlags', null, global);
goog.exportSymbol('proto.prefab.LimitDefinition', null, global);
goog.exportSymbol('proto.prefab.LimitDefinition.SafetyLevel', null, global);
goog.exportSymbol('proto.prefab.LimitDefinitions', null, global);
goog.exportSymbol('proto.prefab.LimitRequest', null, global);
goog.exportSymbol('proto.prefab.LimitRequest.LimitCombiner', null, global);
goog.exportSymbol('proto.prefab.LimitResponse', null, global);
goog.exportSymbol('proto.prefab.LimitResponse.LimitPolicyNames', null, global);
goog.exportSymbol('proto.prefab.OnFailure', null, global);
goog.exportSymbol('proto.prefab.UpsertRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prefab.ConfigServicePointer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prefab.ConfigServicePointer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prefab.ConfigServicePointer.displayName = 'proto.prefab.ConfigServicePointer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prefab.ConfigServicePointer.prototype.toObject = function(opt_includeInstance) {
  return proto.prefab.ConfigServicePointer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prefab.ConfigServicePointer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.ConfigServicePointer.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    startAtId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prefab.ConfigServicePointer}
 */
proto.prefab.ConfigServicePointer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prefab.ConfigServicePointer;
  return proto.prefab.ConfigServicePointer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prefab.ConfigServicePointer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prefab.ConfigServicePointer}
 */
proto.prefab.ConfigServicePointer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartAtId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prefab.ConfigServicePointer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prefab.ConfigServicePointer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prefab.ConfigServicePointer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.ConfigServicePointer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getStartAtId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 account_id = 1;
 * @return {number}
 */
proto.prefab.ConfigServicePointer.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.prefab.ConfigServicePointer.prototype.setAccountId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 start_at_id = 2;
 * @return {number}
 */
proto.prefab.ConfigServicePointer.prototype.getStartAtId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prefab.ConfigServicePointer.prototype.setStartAtId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prefab.ConfigDelta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prefab.ConfigDelta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prefab.ConfigDelta.displayName = 'proto.prefab.ConfigDelta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prefab.ConfigDelta.prototype.toObject = function(opt_includeInstance) {
  return proto.prefab.ConfigDelta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prefab.ConfigDelta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.ConfigDelta.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    key: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: (f = msg.getValue()) && proto.prefab.ConfigValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prefab.ConfigDelta}
 */
proto.prefab.ConfigDelta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prefab.ConfigDelta;
  return proto.prefab.ConfigDelta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prefab.ConfigDelta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prefab.ConfigDelta}
 */
proto.prefab.ConfigDelta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 4:
      var value = new proto.prefab.ConfigValue;
      reader.readMessage(value,proto.prefab.ConfigValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prefab.ConfigDelta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prefab.ConfigDelta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prefab.ConfigDelta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.ConfigDelta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.prefab.ConfigValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 2;
 * @return {number}
 */
proto.prefab.ConfigDelta.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prefab.ConfigDelta.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string key = 3;
 * @return {string}
 */
proto.prefab.ConfigDelta.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.prefab.ConfigDelta.prototype.setKey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional ConfigValue value = 4;
 * @return {?proto.prefab.ConfigValue}
 */
proto.prefab.ConfigDelta.prototype.getValue = function() {
  return /** @type{?proto.prefab.ConfigValue} */ (
    jspb.Message.getWrapperField(this, proto.prefab.ConfigValue, 4));
};


/** @param {?proto.prefab.ConfigValue|undefined} value */
proto.prefab.ConfigDelta.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.prefab.ConfigDelta.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prefab.ConfigDelta.prototype.hasValue = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prefab.ConfigValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.prefab.ConfigValue.oneofGroups_);
};
goog.inherits(proto.prefab.ConfigValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prefab.ConfigValue.displayName = 'proto.prefab.ConfigValue';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.prefab.ConfigValue.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.prefab.ConfigValue.TypeCase = {
  TYPE_NOT_SET: 0,
  INT: 1,
  STRING: 2,
  BYTES: 3,
  DOUBLE: 4,
  BOOL: 5,
  FEATURE_FLAG: 6
};

/**
 * @return {proto.prefab.ConfigValue.TypeCase}
 */
proto.prefab.ConfigValue.prototype.getTypeCase = function() {
  return /** @type {proto.prefab.ConfigValue.TypeCase} */(jspb.Message.computeOneofCase(this, proto.prefab.ConfigValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prefab.ConfigValue.prototype.toObject = function(opt_includeInstance) {
  return proto.prefab.ConfigValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prefab.ConfigValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.ConfigValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_int: jspb.Message.getFieldWithDefault(msg, 1, 0),
    string: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bytes: msg.getBytes_asB64(),
    pb_double: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    bool: jspb.Message.getFieldWithDefault(msg, 5, false),
    featureFlag: (f = msg.getFeatureFlag()) && proto.prefab.FeatureFlag.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prefab.ConfigValue}
 */
proto.prefab.ConfigValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prefab.ConfigValue;
  return proto.prefab.ConfigValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prefab.ConfigValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prefab.ConfigValue}
 */
proto.prefab.ConfigValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDouble(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBool(value);
      break;
    case 6:
      var value = new proto.prefab.FeatureFlag;
      reader.readMessage(value,proto.prefab.FeatureFlag.deserializeBinaryFromReader);
      msg.setFeatureFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prefab.ConfigValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prefab.ConfigValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prefab.ConfigValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.ConfigValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getFeatureFlag();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.prefab.FeatureFlag.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 int = 1;
 * @return {number}
 */
proto.prefab.ConfigValue.prototype.getInt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.prefab.ConfigValue.prototype.setInt = function(value) {
  jspb.Message.setOneofField(this, 1, proto.prefab.ConfigValue.oneofGroups_[0], value);
};


proto.prefab.ConfigValue.prototype.clearInt = function() {
  jspb.Message.setOneofField(this, 1, proto.prefab.ConfigValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prefab.ConfigValue.prototype.hasInt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string string = 2;
 * @return {string}
 */
proto.prefab.ConfigValue.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.prefab.ConfigValue.prototype.setString = function(value) {
  jspb.Message.setOneofField(this, 2, proto.prefab.ConfigValue.oneofGroups_[0], value);
};


proto.prefab.ConfigValue.prototype.clearString = function() {
  jspb.Message.setOneofField(this, 2, proto.prefab.ConfigValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prefab.ConfigValue.prototype.hasString = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes bytes = 3;
 * @return {!(string|Uint8Array)}
 */
proto.prefab.ConfigValue.prototype.getBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes bytes = 3;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.prefab.ConfigValue.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * optional bytes bytes = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.prefab.ConfigValue.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.prefab.ConfigValue.prototype.setBytes = function(value) {
  jspb.Message.setOneofField(this, 3, proto.prefab.ConfigValue.oneofGroups_[0], value);
};


proto.prefab.ConfigValue.prototype.clearBytes = function() {
  jspb.Message.setOneofField(this, 3, proto.prefab.ConfigValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prefab.ConfigValue.prototype.hasBytes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double double = 4;
 * @return {number}
 */
proto.prefab.ConfigValue.prototype.getDouble = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.prefab.ConfigValue.prototype.setDouble = function(value) {
  jspb.Message.setOneofField(this, 4, proto.prefab.ConfigValue.oneofGroups_[0], value);
};


proto.prefab.ConfigValue.prototype.clearDouble = function() {
  jspb.Message.setOneofField(this, 4, proto.prefab.ConfigValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prefab.ConfigValue.prototype.hasDouble = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool bool = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.prefab.ConfigValue.prototype.getBool = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.prefab.ConfigValue.prototype.setBool = function(value) {
  jspb.Message.setOneofField(this, 5, proto.prefab.ConfigValue.oneofGroups_[0], value);
};


proto.prefab.ConfigValue.prototype.clearBool = function() {
  jspb.Message.setOneofField(this, 5, proto.prefab.ConfigValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prefab.ConfigValue.prototype.hasBool = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FeatureFlag feature_flag = 6;
 * @return {?proto.prefab.FeatureFlag}
 */
proto.prefab.ConfigValue.prototype.getFeatureFlag = function() {
  return /** @type{?proto.prefab.FeatureFlag} */ (
    jspb.Message.getWrapperField(this, proto.prefab.FeatureFlag, 6));
};


/** @param {?proto.prefab.FeatureFlag|undefined} value */
proto.prefab.ConfigValue.prototype.setFeatureFlag = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.prefab.ConfigValue.oneofGroups_[0], value);
};


proto.prefab.ConfigValue.prototype.clearFeatureFlag = function() {
  this.setFeatureFlag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prefab.ConfigValue.prototype.hasFeatureFlag = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prefab.ConfigDeltas = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prefab.ConfigDeltas.repeatedFields_, null);
};
goog.inherits(proto.prefab.ConfigDeltas, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prefab.ConfigDeltas.displayName = 'proto.prefab.ConfigDeltas';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prefab.ConfigDeltas.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prefab.ConfigDeltas.prototype.toObject = function(opt_includeInstance) {
  return proto.prefab.ConfigDeltas.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prefab.ConfigDeltas} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.ConfigDeltas.toObject = function(includeInstance, msg) {
  var f, obj = {
    deltasList: jspb.Message.toObjectList(msg.getDeltasList(),
    proto.prefab.ConfigDelta.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prefab.ConfigDeltas}
 */
proto.prefab.ConfigDeltas.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prefab.ConfigDeltas;
  return proto.prefab.ConfigDeltas.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prefab.ConfigDeltas} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prefab.ConfigDeltas}
 */
proto.prefab.ConfigDeltas.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prefab.ConfigDelta;
      reader.readMessage(value,proto.prefab.ConfigDelta.deserializeBinaryFromReader);
      msg.addDeltas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prefab.ConfigDeltas.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prefab.ConfigDeltas.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prefab.ConfigDeltas} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.ConfigDeltas.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeltasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.prefab.ConfigDelta.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConfigDelta deltas = 1;
 * @return {!Array.<!proto.prefab.ConfigDelta>}
 */
proto.prefab.ConfigDeltas.prototype.getDeltasList = function() {
  return /** @type{!Array.<!proto.prefab.ConfigDelta>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prefab.ConfigDelta, 1));
};


/** @param {!Array.<!proto.prefab.ConfigDelta>} value */
proto.prefab.ConfigDeltas.prototype.setDeltasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.prefab.ConfigDelta=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prefab.ConfigDelta}
 */
proto.prefab.ConfigDeltas.prototype.addDeltas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.prefab.ConfigDelta, opt_index);
};


proto.prefab.ConfigDeltas.prototype.clearDeltasList = function() {
  this.setDeltasList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prefab.UpsertRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prefab.UpsertRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prefab.UpsertRequest.displayName = 'proto.prefab.UpsertRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prefab.UpsertRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.prefab.UpsertRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prefab.UpsertRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.UpsertRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    configDelta: (f = msg.getConfigDelta()) && proto.prefab.ConfigDelta.toObject(includeInstance, f),
    previousKey: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prefab.UpsertRequest}
 */
proto.prefab.UpsertRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prefab.UpsertRequest;
  return proto.prefab.UpsertRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prefab.UpsertRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prefab.UpsertRequest}
 */
proto.prefab.UpsertRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountId(value);
      break;
    case 2:
      var value = new proto.prefab.ConfigDelta;
      reader.readMessage(value,proto.prefab.ConfigDelta.deserializeBinaryFromReader);
      msg.setConfigDelta(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prefab.UpsertRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prefab.UpsertRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prefab.UpsertRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.UpsertRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getConfigDelta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.prefab.ConfigDelta.serializeBinaryToWriter
    );
  }
  f = message.getPreviousKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 account_id = 1;
 * @return {number}
 */
proto.prefab.UpsertRequest.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.prefab.UpsertRequest.prototype.setAccountId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ConfigDelta config_delta = 2;
 * @return {?proto.prefab.ConfigDelta}
 */
proto.prefab.UpsertRequest.prototype.getConfigDelta = function() {
  return /** @type{?proto.prefab.ConfigDelta} */ (
    jspb.Message.getWrapperField(this, proto.prefab.ConfigDelta, 2));
};


/** @param {?proto.prefab.ConfigDelta|undefined} value */
proto.prefab.UpsertRequest.prototype.setConfigDelta = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.prefab.UpsertRequest.prototype.clearConfigDelta = function() {
  this.setConfigDelta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prefab.UpsertRequest.prototype.hasConfigDelta = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string previous_key = 3;
 * @return {string}
 */
proto.prefab.UpsertRequest.prototype.getPreviousKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.prefab.UpsertRequest.prototype.setPreviousKey = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prefab.LimitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prefab.LimitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prefab.LimitResponse.displayName = 'proto.prefab.LimitResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prefab.LimitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.prefab.LimitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prefab.LimitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.LimitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    passed: jspb.Message.getFieldWithDefault(msg, 1, false),
    expiresAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    enforcedGroup: jspb.Message.getFieldWithDefault(msg, 3, ""),
    currentBucket: jspb.Message.getFieldWithDefault(msg, 4, 0),
    policyGroup: jspb.Message.getFieldWithDefault(msg, 5, ""),
    policyName: jspb.Message.getFieldWithDefault(msg, 6, 0),
    policyLimit: jspb.Message.getFieldWithDefault(msg, 7, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    limitResetAt: jspb.Message.getFieldWithDefault(msg, 9, 0),
    safetyLevel: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prefab.LimitResponse}
 */
proto.prefab.LimitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prefab.LimitResponse;
  return proto.prefab.LimitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prefab.LimitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prefab.LimitResponse}
 */
proto.prefab.LimitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPassed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpiresAt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnforcedGroup(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentBucket(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPolicyGroup(value);
      break;
    case 6:
      var value = /** @type {!proto.prefab.LimitResponse.LimitPolicyNames} */ (reader.readEnum());
      msg.setPolicyName(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPolicyLimit(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimitResetAt(value);
      break;
    case 10:
      var value = /** @type {!proto.prefab.LimitDefinition.SafetyLevel} */ (reader.readEnum());
      msg.setSafetyLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prefab.LimitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prefab.LimitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prefab.LimitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.LimitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPassed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getExpiresAt();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEnforcedGroup();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCurrentBucket();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getPolicyGroup();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPolicyName();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getPolicyLimit();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getLimitResetAt();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getSafetyLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.prefab.LimitResponse.LimitPolicyNames = {
  NOT_SET: 0,
  SECONDLY_ROLLING: 1,
  MINUTELY_ROLLING: 3,
  HOURLY_ROLLING: 5,
  DAILY_ROLLING: 7,
  MONTHLY_ROLLING: 8,
  INFINITE: 9,
  YEARLY_ROLLING: 10
};

/**
 * optional bool passed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.prefab.LimitResponse.prototype.getPassed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.prefab.LimitResponse.prototype.setPassed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 expires_at = 2;
 * @return {number}
 */
proto.prefab.LimitResponse.prototype.getExpiresAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prefab.LimitResponse.prototype.setExpiresAt = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string enforced_group = 3;
 * @return {string}
 */
proto.prefab.LimitResponse.prototype.getEnforcedGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.prefab.LimitResponse.prototype.setEnforcedGroup = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 current_bucket = 4;
 * @return {number}
 */
proto.prefab.LimitResponse.prototype.getCurrentBucket = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.prefab.LimitResponse.prototype.setCurrentBucket = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string policy_group = 5;
 * @return {string}
 */
proto.prefab.LimitResponse.prototype.getPolicyGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.prefab.LimitResponse.prototype.setPolicyGroup = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional LimitPolicyNames policy_name = 6;
 * @return {!proto.prefab.LimitResponse.LimitPolicyNames}
 */
proto.prefab.LimitResponse.prototype.getPolicyName = function() {
  return /** @type {!proto.prefab.LimitResponse.LimitPolicyNames} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.prefab.LimitResponse.LimitPolicyNames} value */
proto.prefab.LimitResponse.prototype.setPolicyName = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 policy_limit = 7;
 * @return {number}
 */
proto.prefab.LimitResponse.prototype.getPolicyLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.prefab.LimitResponse.prototype.setPolicyLimit = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int64 amount = 8;
 * @return {number}
 */
proto.prefab.LimitResponse.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.prefab.LimitResponse.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int64 limit_reset_at = 9;
 * @return {number}
 */
proto.prefab.LimitResponse.prototype.getLimitResetAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.prefab.LimitResponse.prototype.setLimitResetAt = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional LimitDefinition.SafetyLevel safety_level = 10;
 * @return {!proto.prefab.LimitDefinition.SafetyLevel}
 */
proto.prefab.LimitResponse.prototype.getSafetyLevel = function() {
  return /** @type {!proto.prefab.LimitDefinition.SafetyLevel} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.prefab.LimitDefinition.SafetyLevel} value */
proto.prefab.LimitResponse.prototype.setSafetyLevel = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prefab.LimitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prefab.LimitRequest.repeatedFields_, null);
};
goog.inherits(proto.prefab.LimitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prefab.LimitRequest.displayName = 'proto.prefab.LimitRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prefab.LimitRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prefab.LimitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.prefab.LimitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prefab.LimitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.LimitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    acquireAmount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    groupsList: jspb.Message.getRepeatedField(msg, 3),
    limitCombiner: jspb.Message.getFieldWithDefault(msg, 4, 0),
    allowPartialResponse: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prefab.LimitRequest}
 */
proto.prefab.LimitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prefab.LimitRequest;
  return proto.prefab.LimitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prefab.LimitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prefab.LimitRequest}
 */
proto.prefab.LimitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAcquireAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addGroups(value);
      break;
    case 4:
      var value = /** @type {!proto.prefab.LimitRequest.LimitCombiner} */ (reader.readEnum());
      msg.setLimitCombiner(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowPartialResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prefab.LimitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prefab.LimitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prefab.LimitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.LimitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAcquireAmount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getLimitCombiner();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getAllowPartialResponse();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.prefab.LimitRequest.LimitCombiner = {
  NOT_SET: 0,
  MINIMUM: 1,
  MAXIMUM: 2
};

/**
 * optional int64 account_id = 1;
 * @return {number}
 */
proto.prefab.LimitRequest.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.prefab.LimitRequest.prototype.setAccountId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 acquire_amount = 2;
 * @return {number}
 */
proto.prefab.LimitRequest.prototype.getAcquireAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prefab.LimitRequest.prototype.setAcquireAmount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string groups = 3;
 * @return {!Array.<string>}
 */
proto.prefab.LimitRequest.prototype.getGroupsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<string>} value */
proto.prefab.LimitRequest.prototype.setGroupsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.prefab.LimitRequest.prototype.addGroups = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.prefab.LimitRequest.prototype.clearGroupsList = function() {
  this.setGroupsList([]);
};


/**
 * optional LimitCombiner limit_combiner = 4;
 * @return {!proto.prefab.LimitRequest.LimitCombiner}
 */
proto.prefab.LimitRequest.prototype.getLimitCombiner = function() {
  return /** @type {!proto.prefab.LimitRequest.LimitCombiner} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.prefab.LimitRequest.LimitCombiner} value */
proto.prefab.LimitRequest.prototype.setLimitCombiner = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool allow_partial_response = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.prefab.LimitRequest.prototype.getAllowPartialResponse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.prefab.LimitRequest.prototype.setAllowPartialResponse = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prefab.FeatureFlag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prefab.FeatureFlag.repeatedFields_, null);
};
goog.inherits(proto.prefab.FeatureFlag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prefab.FeatureFlag.displayName = 'proto.prefab.FeatureFlag';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prefab.FeatureFlag.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prefab.FeatureFlag.prototype.toObject = function(opt_includeInstance) {
  return proto.prefab.FeatureFlag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prefab.FeatureFlag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.FeatureFlag.toObject = function(includeInstance, msg) {
  var f, obj = {
    pct: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    whitelistedList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prefab.FeatureFlag}
 */
proto.prefab.FeatureFlag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prefab.FeatureFlag;
  return proto.prefab.FeatureFlag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prefab.FeatureFlag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prefab.FeatureFlag}
 */
proto.prefab.FeatureFlag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPct(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addWhitelisted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prefab.FeatureFlag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prefab.FeatureFlag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prefab.FeatureFlag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.FeatureFlag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPct();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getWhitelistedList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional double pct = 3;
 * @return {number}
 */
proto.prefab.FeatureFlag.prototype.getPct = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.prefab.FeatureFlag.prototype.setPct = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated string whitelisted = 4;
 * @return {!Array.<string>}
 */
proto.prefab.FeatureFlag.prototype.getWhitelistedList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<string>} value */
proto.prefab.FeatureFlag.prototype.setWhitelistedList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.prefab.FeatureFlag.prototype.addWhitelisted = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.prefab.FeatureFlag.prototype.clearWhitelistedList = function() {
  this.setWhitelistedList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prefab.LimitDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prefab.LimitDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prefab.LimitDefinition.displayName = 'proto.prefab.LimitDefinition';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prefab.LimitDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.prefab.LimitDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prefab.LimitDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.LimitDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: jspb.Message.getFieldWithDefault(msg, 1, ""),
    policyName: jspb.Message.getFieldWithDefault(msg, 2, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    burst: jspb.Message.getFieldWithDefault(msg, 4, 0),
    accountId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    lastModified: jspb.Message.getFieldWithDefault(msg, 6, 0),
    returnable: jspb.Message.getFieldWithDefault(msg, 7, false),
    safetyLevel: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prefab.LimitDefinition}
 */
proto.prefab.LimitDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prefab.LimitDefinition;
  return proto.prefab.LimitDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prefab.LimitDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prefab.LimitDefinition}
 */
proto.prefab.LimitDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {!proto.prefab.LimitResponse.LimitPolicyNames} */ (reader.readEnum());
      msg.setPolicyName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBurst(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastModified(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReturnable(value);
      break;
    case 8:
      var value = /** @type {!proto.prefab.LimitDefinition.SafetyLevel} */ (reader.readEnum());
      msg.setSafetyLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prefab.LimitDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prefab.LimitDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prefab.LimitDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.LimitDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPolicyName();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getBurst();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getLastModified();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getReturnable();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSafetyLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.prefab.LimitDefinition.SafetyLevel = {
  NOT_SET: 0,
  L4_BEST_EFFORT: 4,
  L5_BOMBPROOF: 5
};

/**
 * optional string group = 1;
 * @return {string}
 */
proto.prefab.LimitDefinition.prototype.getGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.prefab.LimitDefinition.prototype.setGroup = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional LimitResponse.LimitPolicyNames policy_name = 2;
 * @return {!proto.prefab.LimitResponse.LimitPolicyNames}
 */
proto.prefab.LimitDefinition.prototype.getPolicyName = function() {
  return /** @type {!proto.prefab.LimitResponse.LimitPolicyNames} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.prefab.LimitResponse.LimitPolicyNames} value */
proto.prefab.LimitDefinition.prototype.setPolicyName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 limit = 3;
 * @return {number}
 */
proto.prefab.LimitDefinition.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.prefab.LimitDefinition.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 burst = 4;
 * @return {number}
 */
proto.prefab.LimitDefinition.prototype.getBurst = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.prefab.LimitDefinition.prototype.setBurst = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 account_id = 5;
 * @return {number}
 */
proto.prefab.LimitDefinition.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.prefab.LimitDefinition.prototype.setAccountId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 last_modified = 6;
 * @return {number}
 */
proto.prefab.LimitDefinition.prototype.getLastModified = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.prefab.LimitDefinition.prototype.setLastModified = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool returnable = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.prefab.LimitDefinition.prototype.getReturnable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.prefab.LimitDefinition.prototype.setReturnable = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional SafetyLevel safety_level = 8;
 * @return {!proto.prefab.LimitDefinition.SafetyLevel}
 */
proto.prefab.LimitDefinition.prototype.getSafetyLevel = function() {
  return /** @type {!proto.prefab.LimitDefinition.SafetyLevel} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.prefab.LimitDefinition.SafetyLevel} value */
proto.prefab.LimitDefinition.prototype.setSafetyLevel = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prefab.LimitDefinitions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prefab.LimitDefinitions.repeatedFields_, null);
};
goog.inherits(proto.prefab.LimitDefinitions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prefab.LimitDefinitions.displayName = 'proto.prefab.LimitDefinitions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prefab.LimitDefinitions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prefab.LimitDefinitions.prototype.toObject = function(opt_includeInstance) {
  return proto.prefab.LimitDefinitions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prefab.LimitDefinitions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.LimitDefinitions.toObject = function(includeInstance, msg) {
  var f, obj = {
    definitionsList: jspb.Message.toObjectList(msg.getDefinitionsList(),
    proto.prefab.LimitDefinition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prefab.LimitDefinitions}
 */
proto.prefab.LimitDefinitions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prefab.LimitDefinitions;
  return proto.prefab.LimitDefinitions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prefab.LimitDefinitions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prefab.LimitDefinitions}
 */
proto.prefab.LimitDefinitions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prefab.LimitDefinition;
      reader.readMessage(value,proto.prefab.LimitDefinition.deserializeBinaryFromReader);
      msg.addDefinitions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prefab.LimitDefinitions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prefab.LimitDefinitions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prefab.LimitDefinitions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.LimitDefinitions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefinitionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.prefab.LimitDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LimitDefinition definitions = 1;
 * @return {!Array.<!proto.prefab.LimitDefinition>}
 */
proto.prefab.LimitDefinitions.prototype.getDefinitionsList = function() {
  return /** @type{!Array.<!proto.prefab.LimitDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prefab.LimitDefinition, 1));
};


/** @param {!Array.<!proto.prefab.LimitDefinition>} value */
proto.prefab.LimitDefinitions.prototype.setDefinitionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.prefab.LimitDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prefab.LimitDefinition}
 */
proto.prefab.LimitDefinitions.prototype.addDefinitions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.prefab.LimitDefinition, opt_index);
};


proto.prefab.LimitDefinitions.prototype.clearDefinitionsList = function() {
  this.setDefinitionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prefab.FeatureFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prefab.FeatureFlags.repeatedFields_, null);
};
goog.inherits(proto.prefab.FeatureFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prefab.FeatureFlags.displayName = 'proto.prefab.FeatureFlags';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prefab.FeatureFlags.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prefab.FeatureFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.prefab.FeatureFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prefab.FeatureFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.FeatureFlags.toObject = function(includeInstance, msg) {
  var f, obj = {
    flagsList: jspb.Message.toObjectList(msg.getFlagsList(),
    proto.prefab.FeatureFlag.toObject, includeInstance),
    cacheExpiry: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prefab.FeatureFlags}
 */
proto.prefab.FeatureFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prefab.FeatureFlags;
  return proto.prefab.FeatureFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prefab.FeatureFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prefab.FeatureFlags}
 */
proto.prefab.FeatureFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prefab.FeatureFlag;
      reader.readMessage(value,proto.prefab.FeatureFlag.deserializeBinaryFromReader);
      msg.addFlags(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCacheExpiry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prefab.FeatureFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prefab.FeatureFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prefab.FeatureFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.FeatureFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.prefab.FeatureFlag.serializeBinaryToWriter
    );
  }
  f = message.getCacheExpiry();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * repeated FeatureFlag flags = 1;
 * @return {!Array.<!proto.prefab.FeatureFlag>}
 */
proto.prefab.FeatureFlags.prototype.getFlagsList = function() {
  return /** @type{!Array.<!proto.prefab.FeatureFlag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prefab.FeatureFlag, 1));
};


/** @param {!Array.<!proto.prefab.FeatureFlag>} value */
proto.prefab.FeatureFlags.prototype.setFlagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.prefab.FeatureFlag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prefab.FeatureFlag}
 */
proto.prefab.FeatureFlags.prototype.addFlags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.prefab.FeatureFlag, opt_index);
};


proto.prefab.FeatureFlags.prototype.clearFlagsList = function() {
  this.setFlagsList([]);
};


/**
 * optional int64 cache_expiry = 2;
 * @return {number}
 */
proto.prefab.FeatureFlags.prototype.getCacheExpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prefab.FeatureFlags.prototype.setCacheExpiry = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prefab.BufferedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prefab.BufferedRequest.repeatedFields_, null);
};
goog.inherits(proto.prefab.BufferedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prefab.BufferedRequest.displayName = 'proto.prefab.BufferedRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prefab.BufferedRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prefab.BufferedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.prefab.BufferedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prefab.BufferedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.BufferedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    method: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uri: jspb.Message.getFieldWithDefault(msg, 3, ""),
    body: jspb.Message.getFieldWithDefault(msg, 4, ""),
    limitGroupsList: jspb.Message.getRepeatedField(msg, 5),
    contentType: jspb.Message.getFieldWithDefault(msg, 6, ""),
    fifo: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prefab.BufferedRequest}
 */
proto.prefab.BufferedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prefab.BufferedRequest;
  return proto.prefab.BufferedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prefab.BufferedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prefab.BufferedRequest}
 */
proto.prefab.BufferedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addLimitGroups(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentType(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFifo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prefab.BufferedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prefab.BufferedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prefab.BufferedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.BufferedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLimitGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getContentType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getFifo();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional int64 account_id = 1;
 * @return {number}
 */
proto.prefab.BufferedRequest.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.prefab.BufferedRequest.prototype.setAccountId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string method = 2;
 * @return {string}
 */
proto.prefab.BufferedRequest.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.prefab.BufferedRequest.prototype.setMethod = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string uri = 3;
 * @return {string}
 */
proto.prefab.BufferedRequest.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.prefab.BufferedRequest.prototype.setUri = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string body = 4;
 * @return {string}
 */
proto.prefab.BufferedRequest.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.prefab.BufferedRequest.prototype.setBody = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated string limit_groups = 5;
 * @return {!Array.<string>}
 */
proto.prefab.BufferedRequest.prototype.getLimitGroupsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<string>} value */
proto.prefab.BufferedRequest.prototype.setLimitGroupsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.prefab.BufferedRequest.prototype.addLimitGroups = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.prefab.BufferedRequest.prototype.clearLimitGroupsList = function() {
  this.setLimitGroupsList([]);
};


/**
 * optional string content_type = 6;
 * @return {string}
 */
proto.prefab.BufferedRequest.prototype.getContentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.prefab.BufferedRequest.prototype.setContentType = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool fifo = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.prefab.BufferedRequest.prototype.getFifo = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.prefab.BufferedRequest.prototype.setFifo = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prefab.BatchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prefab.BatchRequest.repeatedFields_, null);
};
goog.inherits(proto.prefab.BatchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prefab.BatchRequest.displayName = 'proto.prefab.BatchRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prefab.BatchRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prefab.BatchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.prefab.BatchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prefab.BatchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.BatchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    method: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uri: jspb.Message.getFieldWithDefault(msg, 3, ""),
    body: jspb.Message.getFieldWithDefault(msg, 4, ""),
    limitGroupsList: jspb.Message.getRepeatedField(msg, 5),
    batchTemplate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    batchSeparator: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prefab.BatchRequest}
 */
proto.prefab.BatchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prefab.BatchRequest;
  return proto.prefab.BatchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prefab.BatchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prefab.BatchRequest}
 */
proto.prefab.BatchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addLimitGroups(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBatchTemplate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBatchSeparator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prefab.BatchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prefab.BatchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prefab.BatchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prefab.BatchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLimitGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getBatchTemplate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBatchSeparator();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int64 account_id = 1;
 * @return {number}
 */
proto.prefab.BatchRequest.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.prefab.BatchRequest.prototype.setAccountId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string method = 2;
 * @return {string}
 */
proto.prefab.BatchRequest.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.prefab.BatchRequest.prototype.setMethod = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string uri = 3;
 * @return {string}
 */
proto.prefab.BatchRequest.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.prefab.BatchRequest.prototype.setUri = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string body = 4;
 * @return {string}
 */
proto.prefab.BatchRequest.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.prefab.BatchRequest.prototype.setBody = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated string limit_groups = 5;
 * @return {!Array.<string>}
 */
proto.prefab.BatchRequest.prototype.getLimitGroupsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<string>} value */
proto.prefab.BatchRequest.prototype.setLimitGroupsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.prefab.BatchRequest.prototype.addLimitGroups = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.prefab.BatchRequest.prototype.clearLimitGroupsList = function() {
  this.setLimitGroupsList([]);
};


/**
 * optional string batch_template = 6;
 * @return {string}
 */
proto.prefab.BatchRequest.prototype.getBatchTemplate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.prefab.BatchRequest.prototype.setBatchTemplate = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string batch_separator = 7;
 * @return {string}
 */
proto.prefab.BatchRequest.prototype.getBatchSeparator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.prefab.BatchRequest.prototype.setBatchSeparator = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.prefab.OnFailure = {
  NOT_SET: 0,
  LOG_AND_PASS: 1,
  LOG_AND_FAIL: 2,
  THROW: 3
};

goog.object.extend(exports, proto.prefab);
